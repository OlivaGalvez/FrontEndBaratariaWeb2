{"version":3,"sources":["./src/app/services/enlace.service.ts","./src/app/services/actividad.service.ts","./src/app/services/convenio.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Enlace } from \"../models/Enlace\";\r\nimport { baseFilter } from \"../_fake\";\r\nimport { ITableState, TableResponseModel, TableService } from \"../_metronic_gestion/shared/crud-table\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\n  export class EnlaceService extends TableService<Enlace> implements OnDestroy{\r\n\r\n    API_URL = `${environment.apiUrl}` + 'api/Enlaces/';\r\n  \r\n    constructor(@Inject(HttpClient) http) {\r\n      super(http);\r\n    }\r\n  \r\n    aniadirEnlace (enlace: Enlace): Observable<Enlace> \r\n    {\r\n      const formData = new FormData(); \r\n            \r\n      formData.append(\"enlace\", JSON.stringify(enlace));\r\n      formData.append(\"imagen\", enlace.file, enlace.file.name);\r\n      return this.http.post<Enlace>(this.API_URL, formData);\r\n    }\r\n\r\n    obtenerEnlaces (): Observable<Enlace[]>{\r\n      return this.http.get(this.API_URL).pipe(map(result=><Enlace[]>result));\r\n   }\r\n\r\n    // Necesario para mostrar los enlaces en la tabla de listado\r\n    find(tableState: ITableState): Observable<TableResponseModel<Enlace>> {\r\n      return this.http.get<Enlace[]>(this.API_URL + \"?portal=false\").pipe(\r\n        map((response: Enlace[]) => {\r\n          const filteredResult = baseFilter(response, tableState);\r\n          const result: TableResponseModel<Enlace> = {\r\n            items: filteredResult.items,\r\n            total: filteredResult.total\r\n          };\r\n          return result;\r\n        })\r\n      );\r\n    }\r\n\r\n    getById (id: string): Observable<Enlace>{\r\n      return this.http.get(this.API_URL + id).pipe(map(result=><Enlace>result));\r\n    }\r\n  \r\n    modificarEnlace (enlace: Enlace): Observable<Enlace> \r\n    {\r\n      const formData = new FormData(); \r\n      formData.append(\"enlace\", JSON.stringify(enlace));\r\n      if (enlace.file) formData.append(\"imagen\", enlace.file, enlace.file.name);\r\n      return this.http.put<Enlace>(this.API_URL + enlace.id, formData);\r\n    }\r\n  \r\n    eliminarEnlace (id:number)\r\n    {\r\n      return this.http.delete(this.API_URL + id);\r\n    }\r\n  \r\n    ngOnDestroy() {\r\n      this.subscriptions.forEach(sb => sb.unsubscribe());\r\n    }\r\n  \r\n  }","import { Inject, Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Actividad } from '../models/Actividad';\r\nimport { Observable } from 'rxjs';\r\nimport { TableService } from '../_metronic_portal/shared/crud-table';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITableState, PaginatorState, TableResponseModel } from '../_metronic_gestion/shared/crud-table';\r\nimport { baseFilter } from '../_fake';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\nexport class ActividadesService extends TableService<Actividad> implements OnDestroy{\r\n\r\n  API_URL = `${environment.apiUrl}` + 'api/Actividades/';\r\n\r\n  constructor(@Inject(HttpClient) http) {\r\n    super(http);\r\n  }\r\n\r\n  aniadirActividad (actividad: Actividad): Observable<Actividad> \r\n  {\r\n    const formData = new FormData(); \r\n          \r\n    formData.append(\"actividad\", JSON.stringify(actividad));\r\n    formData.append(\"imagen\", actividad.file, actividad.file.name);\r\n    return this.http.post<Actividad>(this.API_URL, formData);\r\n  }\r\n\r\n  modificarActividad (actividad: Actividad): Observable<Actividad> \r\n  {\r\n    const formData = new FormData(); \r\n    formData.append(\"actividad\", JSON.stringify(actividad));\r\n    if (actividad.file) formData.append(\"imagen\", actividad.file, actividad.file.name);\r\n    return this.http.put<Actividad>(this.API_URL + actividad.id, formData);\r\n  }\r\n\r\n  eliminarActividad (id:number)\r\n  {\r\n    return this.http.delete(this.API_URL + id);\r\n  }\r\n\r\n  obtenerActividades (): Observable<Actividad[]>{\r\n     return this.http.get(this.API_URL).pipe(map(result=><Actividad[]>result));\r\n  }\r\n\r\n  getById (id: string): Observable<Actividad>{\r\n    return this.http.get(this.API_URL + id).pipe(map(result=><Actividad>result));\r\n  }\r\n\r\n   // Necesario para mostrar las actividades en la tabla de listado\r\n   find(tableState: ITableState): Observable<TableResponseModel<Actividad>> {\r\n    return this.http.get<Actividad[]>(this.API_URL + \"?portal=false\").pipe(\r\n      map((response: Actividad[]) => {\r\n        const filteredResult = baseFilter(response, tableState);\r\n        const result: TableResponseModel<Actividad> = {\r\n          items: filteredResult.items,\r\n          total: filteredResult.total\r\n        };\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sb => sb.unsubscribe());\r\n  }\r\n\r\n}","import { Inject, Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Actividad } from '../models/Actividad';\r\nimport { Observable } from 'rxjs';\r\nimport { TableService } from '../_metronic_portal/shared/crud-table';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Convenio } from '../models/Convenio';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITableState, TableResponseModel } from '../_metronic_gestion/shared/crud-table';\r\nimport { baseFilter } from '../_fake';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\nexport class ConveniosService extends TableService<Convenio> implements OnDestroy{\r\n\r\n  API_URL = `${environment.apiUrl}` + 'api/Convenios/';\r\n\r\n  constructor(@Inject(HttpClient) http) {\r\n    super(http);\r\n  }\r\n\r\n  aniadirConvenio (convenio: Convenio): Observable<Convenio> \r\n  {\r\n    const formData = new FormData(); \r\n          \r\n    formData.append(\"convenio\", JSON.stringify(convenio));\r\n    formData.append(\"imagen\", convenio.file, convenio.file.name);\r\n    return this.http.post<Actividad>(this.API_URL, formData);\r\n  }\r\n\r\n  obtenerConvenios (): Observable<Convenio[]>{\r\n    return this.http.get(this.API_URL).pipe(map(result=><Convenio[]>result));\r\n  }\r\n\r\n  find(tableState: ITableState): Observable<TableResponseModel<Convenio>> {\r\n    return this.http.get<Convenio[]>(this.API_URL + \"?portal=false\").pipe(\r\n      map((response: Convenio[]) => {\r\n        const filteredResult = baseFilter(response, tableState);\r\n        const result: TableResponseModel<Convenio> = {\r\n          items: filteredResult.items,\r\n          total: filteredResult.total\r\n        };\r\n        return result;\r\n      })\r\n    );\r\n  } \r\n\r\n  getById (id: string): Observable<Convenio>{\r\n    return this.http.get(this.API_URL + id).pipe(map(result=><Convenio>result));\r\n  }\r\n\r\n   modificarConvenio (convenio: Convenio): Observable<Convenio> \r\n  {\r\n    const formData = new FormData(); \r\n    formData.append(\"convenio\", JSON.stringify(convenio));\r\n    if (convenio.file) formData.append(\"imagen\", convenio.file, convenio.file.name);\r\n    return this.http.put<Convenio>(this.API_URL + convenio.id, formData);\r\n  }\r\n\r\n  eliminarConvenio (id:number)\r\n  {\r\n    return this.http.delete(this.API_URL + id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sb => sb.unsubscribe());\r\n  }\r\n\r\n}"],"sourceRoot":"webpack:///"}