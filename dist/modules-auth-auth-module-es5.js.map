{"version":3,"sources":["webpack:///src/app/modules/auth/_services/auth.service.ts","webpack:///src/app/modules/auth/auth.module.ts","webpack:///src/app/modules/auth/registration/registration.component.ts","webpack:///src/app/modules/auth/registration/registration.component.html","webpack:///src/app/modules/auth/login/login.component.ts","webpack:///src/app/modules/auth/login/login.component.html","webpack:///src/app/modules/auth/logout/logout.component.ts","webpack:///src/app/modules/auth/logout/logout.component.html","webpack:///src/app/modules/auth/_models/auth.model.ts","webpack:///src/app/modules/auth/auth.component.ts","webpack:///src/app/modules/auth/auth.component.html","webpack:///src/app/modules/auth/_services/auth-http/index.ts","webpack:///src/app/modules/auth/_services/auth-http/fake/auth-fake-http.service.ts","webpack:///src/app/modules/auth/registration/confirm-password.validator.ts","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/modules/auth/forgot-password/forgot-password.component.html","webpack:///src/app/modules/auth/auth-routing.module.ts","webpack:///src/app/modules/auth/_models/user.model.ts","webpack:///src/app/modules/i18n/translation.module.ts"],"names":["AuthService","authHttpService","router","unsubscribe","authLocalStorageToken","appVersion","USERDATA_KEY","isLoadingSubject","currentUserSubject","undefined","currentUser$","asObservable","isLoading$","subscr","getUserByToken","subscribe","push","value","user","next","email","password","login","pipe","auth","result","setAuthFromLocalStorage","err","console","error","localStorage","removeItem","navigate","queryParams","getAuthFromLocalStorage","authToken","logout","createUser","forgotPassword","setItem","JSON","stringify","authData","parse","getItem","forEach","sb","providedIn","AuthModule","declarations","imports","RegistrationComponent","fb","authService","currentUserValue","initForm","registrationForm","controls","group","fullname","compose","required","minLength","maxLength","cPassword","agree","validator","MatchPassword","hasError","Object","keys","f","key","newUser","setUser","registrationSubscr","registration","submit","selector","templateUrl","styleUrls","LoginComponent","route","defaultAuth","returnUrl","snapshot","toString","loginForm","loginSubscr","LogoutComponent","AuthModel","refreshToken","expiresIn","AuthComponent","today","Date","API_USERS_URL","apiUrl","AuthHTTPService","http","notFoundError","Error","getAllUsers","length","find","u","toLowerCase","now","roles","Math","random","pic","post","token","users","get","ConfirmPasswordValidator","control","confirmPassword","setErrors","ConfirmPassword","ErrorStates","ForgotPasswordComponent","errorState","NotSubmitted","errorStates","forgotPasswordForm","forgotPasswordSubscr","NoError","HasError","routes","path","component","children","redirectTo","pathMatch","data","window","location","pathname","AuthRoutingModule","forChild","exports","UserModel","id","username","occupation","companyName","phone","address","socialNetworks","TranslationModule"],"mappings":"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","file":"modules-auth-auth-module-es5.js","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, BehaviorSubject, of, Subscription } from 'rxjs';\r\nimport { map, catchError, switchMap, finalize } from 'rxjs/operators';\r\nimport { UserModel } from '../_models/user.model';\r\nimport { AuthModel } from '../_models/auth.model';\r\nimport { AuthHTTPService } from './auth-http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService implements OnDestroy {\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n  private authLocalStorageToken = `${environment.appVersion}-${environment.USERDATA_KEY}`;\r\n\r\n  // public fields\r\n  currentUser$: Observable<UserModel>;\r\n  isLoading$: Observable<boolean>;\r\n  currentUserSubject: BehaviorSubject<UserModel>;\r\n  isLoadingSubject: BehaviorSubject<boolean>;\r\n\r\n\r\n  get currentUserValue(): UserModel {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  set currentUserValue(user: UserModel) {\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  constructor(\r\n    private authHttpService: AuthHTTPService,\r\n    private router: Router\r\n  ) {\r\n    this.isLoadingSubject = new BehaviorSubject<boolean>(false);\r\n    this.currentUserSubject = new BehaviorSubject<UserModel>(undefined);\r\n    this.currentUser$ = this.currentUserSubject.asObservable();\r\n    this.isLoading$ = this.isLoadingSubject.asObservable();\r\n    const subscr = this.getUserByToken().subscribe();\r\n    this.unsubscribe.push(subscr);\r\n  }\r\n\r\n  // public methods\r\n  login(email: string, password: string): Observable<UserModel> {\r\n    this.isLoadingSubject.next(true);\r\n    return this.authHttpService.login(email, password).pipe(\r\n      map((auth: AuthModel) => {\r\n        const result = this.setAuthFromLocalStorage(auth);\r\n        return result;\r\n      }),\r\n      switchMap(() => this.getUserByToken()),\r\n      catchError((err) => {\r\n        console.error('err', err);\r\n        return of(undefined);\r\n      }),\r\n      finalize(() => this.isLoadingSubject.next(false))\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(this.authLocalStorageToken);\r\n    this.router.navigate(['/auth/login'], {\r\n      queryParams: {},\r\n    });\r\n  }\r\n\r\n  getUserByToken(): Observable<UserModel> {\r\n    const auth = this.getAuthFromLocalStorage();\r\n    if (!auth || !auth.authToken) {\r\n      return of(undefined);\r\n    }\r\n\r\n    this.isLoadingSubject.next(true);\r\n    return this.authHttpService.getUserByToken(auth.authToken).pipe(\r\n      map((user: UserModel) => {\r\n        if (user) {\r\n          this.currentUserSubject = new BehaviorSubject<UserModel>(user);\r\n        } else {\r\n          this.logout();\r\n        }\r\n        return user;\r\n      }),\r\n      finalize(() => this.isLoadingSubject.next(false))\r\n    );\r\n  }\r\n\r\n  // need create new user then login\r\n  registration(user: UserModel): Observable<any> {\r\n    this.isLoadingSubject.next(true);\r\n    return this.authHttpService.createUser(user).pipe(\r\n      map(() => {\r\n        this.isLoadingSubject.next(false);\r\n      }),\r\n      switchMap(() => this.login(user.email, user.password)),\r\n      catchError((err) => {\r\n        console.error('err', err);\r\n        return of(undefined);\r\n      }),\r\n      finalize(() => this.isLoadingSubject.next(false))\r\n    );\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<boolean> {\r\n    this.isLoadingSubject.next(true);\r\n    return this.authHttpService\r\n      .forgotPassword(email)\r\n      .pipe(finalize(() => this.isLoadingSubject.next(false)));\r\n  }\r\n\r\n  // private methods\r\n  private setAuthFromLocalStorage(auth: AuthModel): boolean {\r\n    // store auth authToken/refreshToken/epiresIn in local storage to keep user logged in between page refreshes\r\n    if (auth && auth.authToken) {\r\n      localStorage.setItem(this.authLocalStorageToken, JSON.stringify(auth));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private getAuthFromLocalStorage(): AuthModel {\r\n    try {\r\n      const authData = JSON.parse(\r\n        localStorage.getItem(this.authLocalStorageToken)\r\n      );\r\n      return authData;\r\n    } catch (error) {\r\n      console.error(error);\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LogoutComponent } from './logout/logout.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport {TranslationModule} from '../i18n/translation.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegistrationComponent,\r\n    ForgotPasswordComponent,\r\n    LogoutComponent,\r\n    AuthComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    TranslationModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n  ]\r\n})\r\nexport class AuthModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmPasswordValidator } from './confirm-password.validator';\r\nimport { UserModel } from '../_models/user.model';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss'],\r\n})\r\nexport class RegistrationComponent implements OnInit, OnDestroy {\r\n  registrationForm: FormGroup;\r\n  hasError: boolean;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n    // redirect to home if already logged in\r\n    if (this.authService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.registrationForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.registrationForm = this.fb.group(\r\n      {\r\n        fullname: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        email: [\r\n          'qwe@qwe.qwe',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.email,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n          ]),\r\n        ],\r\n        password: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        cPassword: [\r\n          '',\r\n          Validators.compose([\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            Validators.maxLength(100),\r\n          ]),\r\n        ],\r\n        agree: [false, Validators.compose([Validators.required])],\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n\r\n  submit() {\r\n    this.hasError = false;\r\n    const result = {};\r\n    Object.keys(this.f).forEach(key => {\r\n      result[key] = this.f[key].value;\r\n    });\r\n    const newUser = new UserModel();\r\n    newUser.setUser(result);\r\n    const registrationSubscr = this.authService\r\n      .registration(newUser)\r\n      .pipe(first())\r\n      .subscribe((user: UserModel) => {\r\n        if (user) {\r\n          this.router.navigate(['/']);\r\n        } else {\r\n          this.hasError = true;\r\n        }\r\n      });\r\n    this.unsubscribe.push(registrationSubscr);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","<!--begin::Signup-->\r\n<div class=\"login-form login-signup\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form\"\r\n    novalidate=\"novalidate\"\r\n    id=\"kt_login_signup_form\"\r\n    [formGroup]=\"registrationForm\"\r\n    (ngSubmit)=\"submit()\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Sign Up\r\n      </h3>\r\n      <p class=\"text-muted font-weight-bold font-size-h4\">\r\n        Enter your details to create your account\r\n      </p>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"hasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The registration details are incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Fullname</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"text\"\r\n        name=\"fullname\"\r\n        formControlName=\"fullname\"\r\n        placeholder=\"Fullname\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['fullname'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Fullname is required',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Fullname should have at least 3 symbols',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Fullname should have maximum 100 symbols',\r\n          control: registrationForm.controls['fullname']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"email\"\r\n        placeholder=\"Email\"\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{ 'is-invalid': registrationForm.controls['email'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: registrationForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n        >Password</label\r\n      >\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n        name=\"password\"\r\n        formControlName=\"password\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['password'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Password is required',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Password should have at least 3 symbols',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Password should have maximum 100 symbols',\r\n          control: registrationForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n        >Confirm Password</label\r\n      >\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"password\"\r\n        placeholder=\"Confirm password\"\r\n        name=\"cPassword\"\r\n        autocomplete=\"off\"\r\n        formControlName=\"cPassword\"\r\n        [ngClass]=\"{\r\n          'is-invalid': registrationForm.controls['cPassword'].invalid\r\n        }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Confirm Password is required',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Confirm Password should have at least 3 symbols',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Confirm Password should have maximum 100 symbols',\r\n          control: registrationForm.controls['cPassword']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        *ngIf=\"\r\n          registrationForm.controls['cPassword'].errors &&\r\n          registrationForm.controls['cPassword'].errors.ConfirmPassword\r\n        \"\r\n      >\r\n        <div class=\"fv-plugins-message-container\">\r\n          <div class=\"fv-help-block\">\r\n            'Passsword' and 'Confirm Password' didn't match.\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"checkbox mb-0\">\r\n        <input type=\"checkbox\" formControlName=\"agree\" name=\"agree\" />&nbsp;I\r\n        Agree the&nbsp;<a\r\n          href=\"https://keenthemes.com/metronic/?page=faq\"\r\n          target=\"_blank\"\r\n          >terms and conditions</a\r\n        >.&nbsp;\r\n        <span></span>\r\n      </label>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group d-flex flex-wrap pb-lg-0 pb-3\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_signup_submit\"\r\n        [disabled]=\"\r\n          registrationForm.invalid || !registrationForm.controls['agree'].value\r\n        \"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\r\n      >\r\n        Submit\r\n      </button>\r\n      <a\r\n        routerLink=\"/auth/login\"\r\n        type=\"button\"\r\n        id=\"kt_login_signup_cancel\"\r\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\r\n      >\r\n        Cancel\r\n      </a>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n  </form>\r\n  <!--end::Form-->\r\n</div>\r\n<!--end::Signup-->\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n","import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\nimport { UserModel } from '../_models/user.model';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  // KeenThemes mock, change it to:\r\n  // defaultAuth = {\r\n  //   email: '',\r\n  //   password: '',\r\n  // };\r\n  defaultAuth: any = {\r\n    email: 'admin@demo.com',\r\n    password: 'demo',\r\n  };\r\n  loginForm: FormGroup;\r\n  hasError: boolean;\r\n  returnUrl: string;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n    // redirect to home if already logged in\r\n    if (this.authService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl =\r\n        this.route.snapshot.queryParams['returnUrl'.toString()] || '/';\r\n    }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.loginForm = this.fb.group({\r\n      email: [\r\n        this.defaultAuth.email,\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n        ]),\r\n      ],\r\n      password: [\r\n        this.defaultAuth.password,\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(100),\r\n        ]),\r\n      ],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.hasError = false;\r\n    const loginSubscr = this.authService\r\n      .login(this.f.email.value, this.f.password.value)\r\n      .pipe(first())\r\n      .subscribe((user: UserModel) => {\r\n        if (user) {\r\n          this.router.navigate([this.  returnUrl]);\r\n        } else {\r\n          this.hasError = true;\r\n        }\r\n      });\r\n    this.unsubscribe.push(loginSubscr);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unsubscribe.forEach((sb) => sb.unsubscribe());\r\n  }\r\n}\r\n","<!--begin::Signin-->\r\n<div class=\"login-form login-signin\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form\"\r\n    [formGroup]=\"loginForm\"\r\n    novalidate=\"novalidate\"\r\n    id=\"kt_login_signin_form\"\r\n    (ngSubmit)=\"submit()\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Welcome to Metronic\r\n      </h3>\r\n      <span class=\"text-muted font-weight-bold font-size-h4\"\r\n        >New Here?\r\n        <a\r\n          routerLink=\"/auth/registration\"\r\n          id=\"kt_login_signup\"\r\n          class=\"text-primary font-weight-bolder\"\r\n          >{{ \"AUTH.GENERAL.SIGNUP_BUTTON\" | translate }}</a\r\n        >\r\n      </span>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert info-->\r\n    <ng-container *ngIf=\"!hasError\">\r\n      <div class=\"mb-10 alert alert-custom alert-light-info alert-dismissible\">\r\n        <div class=\"alert-text\">\r\n          Use account <strong>{{ defaultAuth.email }}</strong> and password\r\n          <strong>{{ defaultAuth.password }}</strong> to continue.\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert info-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"hasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The login details are incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <label class=\"font-size-h6 font-weight-bolder text-dark\">Email</label>\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\r\n        type=\"email\"\r\n        name=\"email\"\r\n        formControlName=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['email'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>      \r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minLength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: loginForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group\">\r\n      <div class=\"d-flex justify-content-between mt-n5\">\r\n        <label class=\"font-size-h6 font-weight-bolder text-dark pt-5\"\r\n          >Password</label\r\n        >\r\n        <a\r\n          routerLink=\"/auth/forgot-password\"\r\n          class=\"text-primary font-size-h6 font-weight-bolder text-hover-primary pt-5\"\r\n          id=\"kt_login_forgot\"\r\n        >\r\n          Forgot Password ?\r\n        </a>\r\n      </div>\r\n\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        autocomplete=\"off\"\r\n        formControlName=\"password\"\r\n        [ngClass]=\"{ 'is-invalid': loginForm.controls['password'].invalid }\"\r\n      />\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Password is required',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minlength',\r\n          message: 'Password should have at least 3 symbols',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Password should have maximum 100 symbols',\r\n          control: loginForm.controls['password']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n\r\n    <!--begin::Action-->\r\n    <div class=\"pb-lg-0 pb-5\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_signin_submit\"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-3\"\r\n        [disabled]=\"loginForm.invalid\"\r\n      >\r\n        Sign In\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-light-primary font-weight-bolder px-8 py-4 my-3 font-size-lg\"\r\n      >\r\n        <span class=\"svg-icon svg-icon-md\">\r\n          <img src=\"./assets/media/svg/social-icons/google.svg\" />\r\n        </span>\r\n        Sign in with Google\r\n      </button>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Action-->\r\n  </form>\r\n  <!--end::Form-->\r\n</div>\r\n<!--end::Signin-->\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../_services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-logout',\r\n  templateUrl: './logout.component.html',\r\n  styleUrls: ['./logout.component.scss'],\r\n})\r\nexport class LogoutComponent implements OnInit {\r\n  constructor(private authService: AuthService) {\r\n    this.authService.logout();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<p>logout works!</p>\r\n","export class AuthModel {\r\n  authToken: string;\r\n  refreshToken: string;\r\n  expiresIn: Date;\r\n\r\n  setAuth(auth: any) {\r\n    this.authToken = auth.authToken;\r\n    this.refreshToken = auth.refreshToken;\r\n    this.expiresIn = auth.expiresIn;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n  today: Date = new Date();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"d-flex flex-column flex-root h-100\" id=\"kt_login_wrapper\">\r\n  <!--begin::Login-->\r\n  <div class=\"login login-1 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\r\n    <!--begin::Aside-->\r\n    <div class=\"login-aside d-flex flex-column flex-row-auto\" style=\"background-color: #F2C98A;\">\r\n      <!--begin::Aside Top-->\r\n      <div class=\"d-flex flex-column-auto flex-column pt-lg-40 pt-15\">\r\n        <!--begin::Aside header-->\r\n        <a href=\"#\" class=\"text-center mb-10\">\r\n          <img src=\"./assets/media/logos/logo-letter-1.png\" class=\"max-h-70px\" alt=\"\" />\r\n        </a>\r\n        <!--end::Aside header-->\r\n\r\n        <!--begin::Aside title-->\r\n        <h3 class=\"font-weight-bolder text-center font-size-h4 font-size-h1-lg\" style=\"color: #986923;\">\r\n          Discover Amazing Metronic<br />\r\n          with great build tools\r\n        </h3>\r\n        <!--end::Aside title-->\r\n      </div>\r\n      <!--end::Aside Top-->\r\n\r\n      <!--begin::Aside Bottom-->\r\n      <div class=\"aside-img d-flex flex-row-fluid bgi-no-repeat bgi-position-y-bottom bgi-position-x-center\"\r\n        style=\"background-image: url('./assets/media/svg/illustrations/login-visual-1.svg')\"></div>\r\n      <!--end::Aside Bottom-->\r\n    </div>\r\n    <!--begin::Aside-->\r\n\r\n    <!--begin::Content-->\r\n    <div\r\n      class=\"login-content flex-row-fluid d-flex flex-column justify-content-center position-relative overflow-hidden p-7 mx-auto\">\r\n      <!--begin::Content body-->\r\n      <div class=\"d-flex flex-column-fluid flex-center\">\r\n        <router-outlet></router-outlet>\r\n      </div>\r\n      <!--end::Content body-->\r\n\r\n      <!--begin::Content footer-->\r\n      <div class=\"d-flex justify-content-lg-start justify-content-center align-items-end py-7 py-lg-0\">\r\n        <a href=\"#\" class=\"text-primary font-weight-bolder font-size-h5\">Terms</a>\r\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Plans</a>\r\n        <a href=\"#\" class=\"text-primary ml-10 font-weight-bolder font-size-h5\">Contact Us</a>\r\n      </div>\r\n      <!--end::Content footer-->\r\n    </div>\r\n    <!--end::Content-->\r\n  </div>\r\n  <!--end::Login-->\r\n</div>","// #fake-start#\r\nexport { AuthHTTPService } from './fake/auth-fake-http.service'; // You have to comment this, when your real back-end is done\r\n// #fake-end#\r\n\r\n// #real-start#\r\n// export { AuthHTTPService } from './auth-http.service'; // You have to uncomment this, when your real back-end is done\r\n// #real-end#\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError } from 'rxjs/operators';\r\n\r\nimport { UserModel } from '../../../_models/user.model';\r\nimport { AuthModel } from '../../../_models/auth.model';\r\nimport { UsersTable } from '../../../../../_fake/fake-db/users.table';\r\nimport { environment } from '../../../../../../environments/environment';\r\n\r\nconst API_USERS_URL = `${environment.apiUrl}/users`;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthHTTPService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // public methods\r\n  login(email: string, password: string): Observable<any> {\r\n    const notFoundError = new Error('Not Found');\r\n    if (!email || !password) {\r\n      return of(notFoundError);\r\n    }\r\n\r\n    return this.getAllUsers().pipe(\r\n      map((result: UserModel[]) => {\r\n        if (result.length <= 0) {\r\n          return notFoundError;\r\n        }\r\n\r\n        const user = result.find((u) => {\r\n          return (\r\n            u.email.toLowerCase() === email.toLowerCase() &&\r\n            u.password === password\r\n          );\r\n        });\r\n        if (!user) {\r\n          return notFoundError;\r\n        }\r\n\r\n        const auth = new AuthModel();\r\n        auth.authToken = user.authToken;\r\n        auth.refreshToken = user.refreshToken;\r\n        auth.expiresIn = new Date(Date.now() + 100 * 24 * 60 * 60 * 1000);\r\n        return auth;\r\n      })\r\n    );\r\n  }\r\n\r\n  createUser(user: UserModel): Observable<any> {\r\n    user.roles = [2]; // Manager\r\n    user.authToken = 'auth-token-' + Math.random();\r\n    user.refreshToken = 'auth-token-' + Math.random();\r\n    user.expiresIn = new Date(Date.now() + 100 * 24 * 60 * 60 * 1000);\r\n    user.pic = './assets/media/users/default.jpg';\r\n\r\n    return this.http.post<UserModel>(API_USERS_URL, user);\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<boolean> {\r\n    return this.getAllUsers().pipe(\r\n      map((result: UserModel[]) => {\r\n        const user = result.find(\r\n          (u) => u.email.toLowerCase() === email.toLowerCase()\r\n        );\r\n        return user !== undefined;\r\n      })\r\n    );\r\n  }\r\n\r\n  getUserByToken(token: string): Observable<UserModel> {\r\n    const user = UsersTable.users.find((u) => {\r\n      return u.authToken === token;\r\n    });\r\n\r\n    if (!user) {\r\n      return of(undefined);\r\n    }\r\n\r\n    return of(user);\r\n  }\r\n\r\n  getAllUsers(): Observable<UserModel[]> {\r\n    return this.http.get<UserModel[]>(API_USERS_URL);\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\nexport class ConfirmPasswordValidator {\r\n  /**\r\n   * Check matching password with confirm password\r\n   * @param control AbstractControl\r\n   */\r\n  static MatchPassword(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n\r\n    const confirmPassword = control.get('cPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('cPassword').setErrors({ ConfirmPassword: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AuthService } from '../_services/auth.service';\r\nimport { first } from 'rxjs/operators';\r\n\r\nenum ErrorStates {\r\n  NotSubmitted,\r\n  HasError,\r\n  NoError,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n  errorState: ErrorStates = ErrorStates.NotSubmitted;\r\n  errorStates = ErrorStates;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService\r\n  ) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: [\r\n        'admin@demo.com',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n        ]),\r\n      ],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.errorState = ErrorStates.NotSubmitted;\r\n    const forgotPasswordSubscr = this.authService\r\n      .forgotPassword(this.f.email.value)\r\n      .pipe(first())\r\n      .subscribe((result: boolean) => {\r\n        this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\r\n      });\r\n    this.unsubscribe.push(forgotPasswordSubscr);\r\n  }\r\n}\r\n","<div class=\"login-form login-forgot\">\r\n  <!--begin::Form-->\r\n  <form\r\n    class=\"form fv-plugins-bootstrap fv-plugins-framework\"\r\n    novalidate=\"novalidate\"\r\n    [formGroup]=\"forgotPasswordForm\"\r\n    (ngSubmit)=\"submit()\"\r\n    id=\"kt_login_forgot_form\"\r\n    [ngStyle]=\"{\r\n      display: errorState === errorStates.NoError ? 'none' : 'block'\r\n    }\"\r\n  >\r\n    <!--begin::Title-->\r\n    <div class=\"pb-13 pt-lg-0 pt-5\">\r\n      <h3 class=\"font-weight-bolder text-dark font-size-h4 font-size-h1-lg\">\r\n        Forgotten Password ?\r\n      </h3>\r\n      <p class=\"text-muted font-weight-bold font-size-h4\">\r\n        Enter your email to reset your password\r\n      </p>\r\n    </div>\r\n    <!--end::Title-->\r\n\r\n    <!-- begin::Alert error-->\r\n    <ng-container *ngIf=\"errorState === errorStates.HasError\">\r\n      <div\r\n        class=\"mb-10 alert alert-custom alert-light-danger alert-dismissible\"\r\n      >\r\n        <div class=\"alert-text\">The email detail is incorrect</div>\r\n      </div>\r\n    </ng-container>\r\n    <!-- end::Alert error-->\r\n\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group fv-plugins-icon-container has-danger\">\r\n      <input\r\n        class=\"form-control form-control-solid h-auto py-7 px-6 rounded-lg font-size-h6\"\r\n        type=\"email\"\r\n        formControlName=\"email\"\r\n        placeholder=\"Email\"\r\n        name=\"email\"\r\n        autocomplete=\"off\"\r\n        [ngClass]=\"{\r\n          'is-invalid': forgotPasswordForm.controls['email'].invalid\r\n        }\"\r\n      />\r\n\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'required',\r\n          message: 'Email is required',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'email',\r\n          message: 'Email is invalid',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'minLength',\r\n          message: 'Email should have at least 3 symbols',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"formError\"\r\n        [ngTemplateOutletContext]=\"{\r\n          validation: 'maxLength',\r\n          message: 'Email should have maximum 360 symbols',\r\n          control: forgotPasswordForm.controls['email']\r\n        }\"\r\n      ></ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n    <!--begin::Form group-->\r\n    <div class=\"form-group d-flex flex-wrap pb-lg-0\">\r\n      <button\r\n        type=\"submit\"\r\n        id=\"kt_login_forgot_submit\"\r\n        class=\"btn btn-primary font-weight-bolder font-size-h6 px-8 py-4 my-3 mr-4\"\r\n      >\r\n        Submit\r\n      </button>\r\n      <a\r\n        routerLink=\"/auth/login\"\r\n        id=\"kt_login_forgot_cancel\"\r\n        class=\"btn btn-light-primary font-weight-bolder font-size-h6 px-8 py-4 my-3\"\r\n      >\r\n        Cancel\r\n      </a>\r\n\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"spinner spinner-primary ml-5\"></span>\r\n      </ng-container>\r\n    </div>\r\n    <!--end::Form group-->\r\n    <div></div>\r\n  </form>\r\n  <!--end::Form-->\r\n\r\n  <ng-container *ngIf=\"errorState === errorStates.NoError\">\r\n    <div\r\n      class=\"card card-custom bgi-no-repeat gutter-b\"\r\n      style=\"\r\n        height: 175px;\r\n        background-color: #4ab58e;\r\n        background-position: calc(100% + 1rem) bottom;\r\n        background-size: 25% auto;\r\n        background-image: url(assets/media/svg/humans/custom-1.svg);\r\n      \"\r\n    >\r\n      <!--begin::Body-->\r\n      <div class=\"card-body d-flex align-items-center\">\r\n        <div class=\"py-2\">\r\n          <h3 class=\"text-white font-weight-bolder mb-3\">Email is correct!</h3>\r\n          <p class=\"text-white font-size-lg\">\r\n            Message with 'recovery' instruction<br />\r\n            has been sent<br />\r\n          </p>\r\n          <a\r\n            routerLink=\"/auth/login\"\r\n            class=\"swal2-confirm btn font-weight-bold btn-light-primary\"\r\n          >\r\n            Ok, got it!\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <!--end::Body-->\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {AuthComponent} from './auth.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {RegistrationComponent} from './registration/registration.component';\r\nimport {ForgotPasswordComponent} from './forgot-password/forgot-password.component';\r\nimport {LogoutComponent} from './logout/logout.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'login',\r\n        pathMatch: 'full'\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent,\r\n        data: {returnUrl: window.location.pathname}\r\n      },\r\n      {\r\n        path: 'registration',\r\n        component: RegistrationComponent\r\n      },\r\n      {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent\r\n      },\r\n      {\r\n        path: 'logout',\r\n        component: LogoutComponent\r\n      },\r\n      {path: '', redirectTo: 'login', pathMatch: 'full'},\r\n      {path: '**', redirectTo: 'login', pathMatch: 'full'},\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(routes) ],\r\n  exports: [ RouterModule ]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { AuthModel } from './auth.model';\r\nimport { AddressModel } from './address.model';\r\nimport { SocialNetworksModel } from './social-networks.model';\r\n\r\nexport class UserModel extends AuthModel {\r\n  id: number;\r\n  username: string;\r\n  password: string;\r\n  fullname: string;\r\n  email: string;\r\n  pic: string;\r\n  roles: number[];\r\n  occupation: string;\r\n  companyName: string;\r\n  phone: string;\r\n  address?: AddressModel;\r\n  socialNetworks?: SocialNetworksModel;\r\n  // personal information\r\n  firstname: string;\r\n  lastname: string;\r\n  website: string;\r\n  // account information\r\n  language: string;\r\n  timeZone: string;\r\n  communication: {\r\n    email: boolean,\r\n    sms: boolean,\r\n    phone: boolean\r\n  };\r\n  // email settings\r\n  emailSettings: {\r\n    emailNotification: boolean,\r\n    sendCopyToPersonalEmail: boolean,\r\n    activityRelatesEmail: {\r\n      youHaveNewNotifications: boolean,\r\n      youAreSentADirectMessage: boolean,\r\n      someoneAddsYouAsAsAConnection: boolean,\r\n      uponNewOrder: boolean,\r\n      newMembershipApproval: boolean,\r\n      memberRegistration: boolean\r\n    },\r\n    updatesFromKeenthemes: {\r\n      newsAboutKeenthemesProductsAndFeatureUpdates: boolean,\r\n      tipsOnGettingMoreOutOfKeen: boolean,\r\n      thingsYouMissedSindeYouLastLoggedIntoKeen: boolean,\r\n      newsAboutMetronicOnPartnerProductsAndOtherServices: boolean,\r\n      tipsOnMetronicBusinessProducts: boolean\r\n    }\r\n  };\r\n\r\n  setUser(user: any) {\r\n    this.id = user.id;\r\n    this.username = user.username || '';\r\n    this.password = user.password || '';\r\n    this.fullname = user.fullname || '';\r\n    this.email = user.email || '';\r\n    this.pic = user.pic || './assets/media/users/default.jpg';\r\n    this.roles = user.roles || [];\r\n    this.occupation = user.occupation || '';\r\n    this.companyName = user.companyName || '';\r\n    this.phone = user.phone || '';\r\n    this.address = user.address;\r\n    this.socialNetworks = user.socialNetworks;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TranslateModule],\r\n  exports: [CommonModule, TranslateModule],\r\n})\r\nexport class TranslationModule {}\r\n"]}