{"version":3,"sources":["./node_modules/highlight.js/lib/languages/xml.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;;AAEA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"highlight-js-lib-languages-xml-es2015.js","sourcesContent":["/**\r\n * @param {string} value\r\n * @returns {RegExp}\r\n * */\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction source(re) {\r\n  if (!re) return null;\r\n  if (typeof re === \"string\") return re;\r\n\r\n  return re.source;\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction lookahead(re) {\r\n  return concat('(?=', re, ')');\r\n}\r\n\r\n/**\r\n * @param {RegExp | string } re\r\n * @returns {string}\r\n */\r\nfunction optional(re) {\r\n  return concat('(', re, ')?');\r\n}\r\n\r\n/**\r\n * @param {...(RegExp | string) } args\r\n * @returns {string}\r\n */\r\nfunction concat(...args) {\r\n  const joined = args.map((x) => source(x)).join(\"\");\r\n  return joined;\r\n}\r\n\r\n/**\r\n * Any of the passed expresssions may match\r\n *\r\n * Creates a huge this | this | that | that match\r\n * @param {(RegExp | string)[] } args\r\n * @returns {string}\r\n */\r\nfunction either(...args) {\r\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\r\n  return joined;\r\n}\r\n\r\n/*\r\nLanguage: HTML, XML\r\nWebsite: https://www.w3.org/XML/\r\nCategory: common\r\nAudit: 2020\r\n*/\r\n\r\n/** @type LanguageFn */\r\nfunction xml(hljs) {\r\n  // Element names can contain letters, digits, hyphens, underscores, and periods\r\n  const TAG_NAME_RE = concat(/[A-Z_]/, optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);\r\n  const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;\r\n  const XML_ENTITIES = {\r\n    className: 'symbol',\r\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\r\n  };\r\n  const XML_META_KEYWORDS = {\r\n    begin: /\\s/,\r\n    contains: [\r\n      {\r\n        className: 'meta-keyword',\r\n        begin: /#?[a-z_][a-z1-9_-]+/,\r\n        illegal: /\\n/\r\n      }\r\n    ]\r\n  };\r\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\r\n    begin: /\\(/,\r\n    end: /\\)/\r\n  });\r\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\r\n    className: 'meta-string'\r\n  });\r\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\r\n    className: 'meta-string'\r\n  });\r\n  const TAG_INTERNALS = {\r\n    endsWithParent: true,\r\n    illegal: /</,\r\n    relevance: 0,\r\n    contains: [\r\n      {\r\n        className: 'attr',\r\n        begin: XML_IDENT_RE,\r\n        relevance: 0\r\n      },\r\n      {\r\n        begin: /=\\s*/,\r\n        relevance: 0,\r\n        contains: [\r\n          {\r\n            className: 'string',\r\n            endsParent: true,\r\n            variants: [\r\n              {\r\n                begin: /\"/,\r\n                end: /\"/,\r\n                contains: [ XML_ENTITIES ]\r\n              },\r\n              {\r\n                begin: /'/,\r\n                end: /'/,\r\n                contains: [ XML_ENTITIES ]\r\n              },\r\n              {\r\n                begin: /[^\\s\"'=<>`]+/\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n  return {\r\n    name: 'HTML, XML',\r\n    aliases: [\r\n      'html',\r\n      'xhtml',\r\n      'rss',\r\n      'atom',\r\n      'xjb',\r\n      'xsd',\r\n      'xsl',\r\n      'plist',\r\n      'wsf',\r\n      'svg'\r\n    ],\r\n    case_insensitive: true,\r\n    contains: [\r\n      {\r\n        className: 'meta',\r\n        begin: /<![a-z]/,\r\n        end: />/,\r\n        relevance: 10,\r\n        contains: [\r\n          XML_META_KEYWORDS,\r\n          QUOTE_META_STRING_MODE,\r\n          APOS_META_STRING_MODE,\r\n          XML_META_PAR_KEYWORDS,\r\n          {\r\n            begin: /\\[/,\r\n            end: /\\]/,\r\n            contains: [\r\n              {\r\n                className: 'meta',\r\n                begin: /<![a-z]/,\r\n                end: />/,\r\n                contains: [\r\n                  XML_META_KEYWORDS,\r\n                  XML_META_PAR_KEYWORDS,\r\n                  QUOTE_META_STRING_MODE,\r\n                  APOS_META_STRING_MODE\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      hljs.COMMENT(\r\n        /<!--/,\r\n        /-->/,\r\n        {\r\n          relevance: 10\r\n        }\r\n      ),\r\n      {\r\n        begin: /<!\\[CDATA\\[/,\r\n        end: /\\]\\]>/,\r\n        relevance: 10\r\n      },\r\n      XML_ENTITIES,\r\n      {\r\n        className: 'meta',\r\n        begin: /<\\?xml/,\r\n        end: /\\?>/,\r\n        relevance: 10\r\n      },\r\n      {\r\n        className: 'tag',\r\n        /*\r\n        The lookahead pattern (?=...) ensures that 'begin' only matches\r\n        '<style' as a single word, followed by a whitespace or an\r\n        ending braket. The '$' is needed for the lexeme to be recognized\r\n        by hljs.subMode() that tests lexemes outside the stream.\r\n        */\r\n        begin: /<style(?=\\s|>)/,\r\n        end: />/,\r\n        keywords: {\r\n          name: 'style'\r\n        },\r\n        contains: [ TAG_INTERNALS ],\r\n        starts: {\r\n          end: /<\\/style>/,\r\n          returnEnd: true,\r\n          subLanguage: [\r\n            'css',\r\n            'xml'\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        className: 'tag',\r\n        // See the comment in the <style tag about the lookahead pattern\r\n        begin: /<script(?=\\s|>)/,\r\n        end: />/,\r\n        keywords: {\r\n          name: 'script'\r\n        },\r\n        contains: [ TAG_INTERNALS ],\r\n        starts: {\r\n          end: /<\\/script>/,\r\n          returnEnd: true,\r\n          subLanguage: [\r\n            'javascript',\r\n            'handlebars',\r\n            'xml'\r\n          ]\r\n        }\r\n      },\r\n      // we need this for now for jSX\r\n      {\r\n        className: 'tag',\r\n        begin: /<>|<\\/>/\r\n      },\r\n      // open tag\r\n      {\r\n        className: 'tag',\r\n        begin: concat(\r\n          /</,\r\n          lookahead(concat(\r\n            TAG_NAME_RE,\r\n            // <tag/>\r\n            // <tag>\r\n            // <tag ...\r\n            either(/\\/>/, />/, /\\s/)\r\n          ))\r\n        ),\r\n        end: /\\/?>/,\r\n        contains: [\r\n          {\r\n            className: 'name',\r\n            begin: TAG_NAME_RE,\r\n            relevance: 0,\r\n            starts: TAG_INTERNALS\r\n          }\r\n        ]\r\n      },\r\n      // close tag\r\n      {\r\n        className: 'tag',\r\n        begin: concat(\r\n          /<\\//,\r\n          lookahead(concat(\r\n            TAG_NAME_RE, />/\r\n          ))\r\n        ),\r\n        contains: [\r\n          {\r\n            className: 'name',\r\n            begin: TAG_NAME_RE,\r\n            relevance: 0\r\n          },\r\n          {\r\n            begin: />/,\r\n            relevance: 0,\r\n            endsParent: true\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nmodule.exports = xml;\r\n"],"sourceRoot":"webpack:///"}