export function debounce(func, waitMilliseconds = 50, options = {}) {
    let timeoutId;
    const isImmediate = options.isImmediate ?? false;
    const callback = options.callback ?? false;
    const maxWait = options.maxWait;
    let lastInvokeTime = Date.now();
    let promises = [];
    function nextInvokeTimeout() {
        if (maxWait !== undefined) {
            const timeSinceLastInvocation = Date.now() - lastInvokeTime;
            if (timeSinceLastInvocation + waitMilliseconds >= maxWait) {
                return maxWait - timeSinceLastInvocation;
            }
        }
        return waitMilliseconds;
    }
    const debouncedFunction = function (...args) {
        const context = this;
        return new Promise((resolve, reject) => {
            const invokeFunction = function () {
                timeoutId = undefined;
                lastInvokeTime = Date.now();
                if (!isImmediate) {
                    const result = func.apply(context, args);
                    callback && callback(result);
                    promises.forEach(({ resolve }) => resolve(result));
                    promises = [];
                }
            };
            const shouldCallNow = isImmediate && timeoutId === undefined;
            if (timeoutId !== undefined) {
                clearTimeout(timeoutId);
            }
            timeoutId = setTimeout(invokeFunction, nextInvokeTimeout());
            if (shouldCallNow) {
                const result = func.apply(context, args);
                callback && callback(result);
                return resolve(result);
            }
            promises.push({ resolve, reject });
        });
    };
    debouncedFunction.cancel = function (reason) {
        if (timeoutId !== undefined) {
            clearTimeout(timeoutId);
        }
        promises.forEach(({ reject }) => reject(reason));
        promises = [];
    };
    return debouncedFunction;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVib3VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy16b29tL3NyYy9saWIvdXRpbHMvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUJBLE1BQU0sVUFBVSxRQUFRLENBQ3RCLElBQU8sRUFDUCxnQkFBZ0IsR0FBRyxFQUFFLEVBQ3JCLFVBQWtDLEVBQUU7SUFFcEMsSUFBSSxTQUFvRCxDQUFDO0lBQ3pELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDO0lBQ2pELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDaEMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRWhDLElBQUksUUFBUSxHQUFzQyxFQUFFLENBQUM7SUFFckQsU0FBUyxpQkFBaUI7UUFDeEIsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGNBQWMsQ0FBQztZQUU1RCxJQUFJLHVCQUF1QixHQUFHLGdCQUFnQixJQUFJLE9BQU8sRUFBRTtnQkFDekQsT0FBTyxPQUFPLEdBQUcsdUJBQXVCLENBQUM7YUFDMUM7U0FDRjtRQUVELE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0saUJBQWlCLEdBQUcsVUFFeEIsR0FBRyxJQUFtQjtRQUV0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDckIsT0FBTyxJQUFJLE9BQU8sQ0FBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDcEQsTUFBTSxjQUFjLEdBQUc7Z0JBQ3JCLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQ3RCLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN6QyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUM3QixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ25ELFFBQVEsR0FBRyxFQUFFLENBQUM7aUJBQ2Y7WUFDSCxDQUFDLENBQUM7WUFFRixNQUFNLGFBQWEsR0FBRyxXQUFXLElBQUksU0FBUyxLQUFLLFNBQVMsQ0FBQztZQUU3RCxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7Z0JBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN6QjtZQUVELFNBQVMsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztZQUU1RCxJQUFJLGFBQWEsRUFBRTtnQkFDakIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3pDLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzdCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsaUJBQWlCLENBQUMsTUFBTSxHQUFHLFVBQVUsTUFBWTtRQUMvQyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDM0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pELFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsT0FBTyxpQkFBaUIsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgT3B0aW9uczxSZXN1bHQ+ID0ge1xuICBpc0ltbWVkaWF0ZT86IGJvb2xlYW47XG4gIG1heFdhaXQ/OiBudW1iZXI7XG4gIGNhbGxiYWNrPzogKGRhdGE6IFJlc3VsdCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVib3VuY2VkRnVuY3Rpb248XG4gIEFyZ3MgZXh0ZW5kcyBhbnlbXSxcbiAgRiBleHRlbmRzICguLi5hcmdzOiBBcmdzKSA9PiBhbnlcbj4ge1xuICAodGhpczogVGhpc1BhcmFtZXRlclR5cGU8Rj4sIC4uLmFyZ3M6IEFyZ3MgJiBQYXJhbWV0ZXJzPEY+KTogUHJvbWlzZTxcbiAgICBSZXR1cm5UeXBlPEY+XG4gID47XG4gIGNhbmNlbDogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIERlYm91bmNlZFByb21pc2U8RnVuY3Rpb25SZXR1cm4+IHtcbiAgcmVzb2x2ZTogKHJlc3VsdDogRnVuY3Rpb25SZXR1cm4pID0+IHZvaWQ7XG4gIHJlamVjdDogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlPEFyZ3MgZXh0ZW5kcyBhbnlbXSwgRiBleHRlbmRzICguLi5hcmdzOiBBcmdzKSA9PiBhbnk+KFxuICBmdW5jOiBGLFxuICB3YWl0TWlsbGlzZWNvbmRzID0gNTAsXG4gIG9wdGlvbnM6IE9wdGlvbnM8UmV0dXJuVHlwZTxGPj4gPSB7fVxuKTogRGVib3VuY2VkRnVuY3Rpb248QXJncywgRj4ge1xuICBsZXQgdGltZW91dElkOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IHVuZGVmaW5lZDtcbiAgY29uc3QgaXNJbW1lZGlhdGUgPSBvcHRpb25zLmlzSW1tZWRpYXRlID8/IGZhbHNlO1xuICBjb25zdCBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2sgPz8gZmFsc2U7XG4gIGNvbnN0IG1heFdhaXQgPSBvcHRpb25zLm1heFdhaXQ7XG4gIGxldCBsYXN0SW52b2tlVGltZSA9IERhdGUubm93KCk7XG5cbiAgbGV0IHByb21pc2VzOiBEZWJvdW5jZWRQcm9taXNlPFJldHVyblR5cGU8Rj4+W10gPSBbXTtcblxuICBmdW5jdGlvbiBuZXh0SW52b2tlVGltZW91dCgpIHtcbiAgICBpZiAobWF4V2FpdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0aW1lU2luY2VMYXN0SW52b2NhdGlvbiA9IERhdGUubm93KCkgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgaWYgKHRpbWVTaW5jZUxhc3RJbnZvY2F0aW9uICsgd2FpdE1pbGxpc2Vjb25kcyA+PSBtYXhXYWl0KSB7XG4gICAgICAgIHJldHVybiBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9jYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdhaXRNaWxsaXNlY29uZHM7XG4gIH1cblxuICBjb25zdCBkZWJvdW5jZWRGdW5jdGlvbiA9IGZ1bmN0aW9uIChcbiAgICB0aGlzOiBUaGlzUGFyYW1ldGVyVHlwZTxGPixcbiAgICAuLi5hcmdzOiBQYXJhbWV0ZXJzPEY+XG4gICkge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxSZXR1cm5UeXBlPEY+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpbnZva2VGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGlmICghaXNJbW1lZGlhdGUpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgcHJvbWlzZXMuZm9yRWFjaCgoeyByZXNvbHZlIH0pID0+IHJlc29sdmUocmVzdWx0KSk7XG4gICAgICAgICAgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgc2hvdWxkQ2FsbE5vdyA9IGlzSW1tZWRpYXRlICYmIHRpbWVvdXRJZCA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodGltZW91dElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB9XG5cbiAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoaW52b2tlRnVuY3Rpb24sIG5leHRJbnZva2VUaW1lb3V0KCkpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FsbE5vdykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfVxuICAgICAgcHJvbWlzZXMucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBkZWJvdW5jZWRGdW5jdGlvbi5jYW5jZWwgPSBmdW5jdGlvbiAocmVhc29uPzogYW55KSB7XG4gICAgaWYgKHRpbWVvdXRJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9XG4gICAgcHJvbWlzZXMuZm9yRWFjaCgoeyByZWplY3QgfSkgPT4gcmVqZWN0KHJlYXNvbikpO1xuICAgIHByb21pc2VzID0gW107XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZEZ1bmN0aW9uO1xufVxuIl19