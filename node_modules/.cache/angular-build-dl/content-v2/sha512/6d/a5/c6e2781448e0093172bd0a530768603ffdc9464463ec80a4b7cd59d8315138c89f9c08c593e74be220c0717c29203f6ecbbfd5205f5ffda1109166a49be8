{"version":3,"sources":["webpack:///src/app/services/enlace.service.ts","webpack:///src/app/services/actividad.service.ts","webpack:///src/app/services/convenio.service.ts"],"names":["EnlaceService","http","API_URL","apiUrl","enlace","formData","FormData","append","JSON","stringify","file","name","post","get","pipe","result","tableState","response","filteredResult","items","total","id","put","subscriptions","forEach","sb","unsubscribe","providedIn","ActividadesService","actividad","ConveniosService","convenio"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, OnDestroy } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { Enlace } from \"../models/Enlace\";\r\nimport { baseFilter } from \"../_fake\";\r\nimport { ITableState, TableResponseModel, TableService } from \"../_metronic_gestion/shared/crud-table\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\n  export class EnlaceService extends TableService<Enlace> implements OnDestroy{\r\n\r\n    API_URL = `${environment.apiUrl}` + 'api/Enlaces/';\r\n  \r\n    constructor(@Inject(HttpClient) http) {\r\n      super(http);\r\n    }\r\n  \r\n    aniadirEnlace (enlace: Enlace): Observable<Enlace> \r\n    {\r\n      const formData = new FormData(); \r\n            \r\n      formData.append(\"enlace\", JSON.stringify(enlace));\r\n      formData.append(\"imagen\", enlace.file, enlace.file.name);\r\n      return this.http.post<Enlace>(this.API_URL, formData);\r\n    }\r\n\r\n    obtenerEnlaces (): Observable<Enlace[]>{\r\n      return this.http.get(this.API_URL).pipe(map(result=><Enlace[]>result));\r\n   }\r\n\r\n    // Necesario para mostrar los enlaces en la tabla de listado\r\n    find(tableState: ITableState): Observable<TableResponseModel<Enlace>> {\r\n      return this.http.get<Enlace[]>(this.API_URL + \"?portal=false\").pipe(\r\n        map((response: Enlace[]) => {\r\n          const filteredResult = baseFilter(response, tableState);\r\n          const result: TableResponseModel<Enlace> = {\r\n            items: filteredResult.items,\r\n            total: filteredResult.total\r\n          };\r\n          return result;\r\n        })\r\n      );\r\n    }\r\n\r\n    getById (id: string): Observable<Enlace>{\r\n      return this.http.get(this.API_URL + id).pipe(map(result=><Enlace>result));\r\n    }\r\n  \r\n    modificarEnlace (enlace: Enlace): Observable<Enlace> \r\n    {\r\n      const formData = new FormData(); \r\n      formData.append(\"enlace\", JSON.stringify(enlace));\r\n      if (enlace.file) formData.append(\"imagen\", enlace.file, enlace.file.name);\r\n      return this.http.put<Enlace>(this.API_URL + enlace.id, formData);\r\n    }\r\n  \r\n    eliminarEnlace (id:number)\r\n    {\r\n      return this.http.delete(this.API_URL + id);\r\n    }\r\n  \r\n    ngOnDestroy() {\r\n      this.subscriptions.forEach(sb => sb.unsubscribe());\r\n    }\r\n  \r\n  }","import { Inject, Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Actividad } from '../models/Actividad';\r\nimport { Observable } from 'rxjs';\r\nimport { TableService } from '../_metronic_portal/shared/crud-table';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITableState, PaginatorState, TableResponseModel } from '../_metronic_gestion/shared/crud-table';\r\nimport { baseFilter } from '../_fake';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\nexport class ActividadesService extends TableService<Actividad> implements OnDestroy{\r\n\r\n  API_URL = `${environment.apiUrl}` + 'api/Actividades/';\r\n\r\n  constructor(@Inject(HttpClient) http) {\r\n    super(http);\r\n  }\r\n\r\n  aniadirActividad (actividad: Actividad): Observable<Actividad> \r\n  {\r\n    const formData = new FormData(); \r\n          \r\n    formData.append(\"actividad\", JSON.stringify(actividad));\r\n    formData.append(\"imagen\", actividad.file, actividad.file.name);\r\n    return this.http.post<Actividad>(this.API_URL, formData);\r\n  }\r\n\r\n  modificarActividad (actividad: Actividad): Observable<Actividad> \r\n  {\r\n    const formData = new FormData(); \r\n    formData.append(\"actividad\", JSON.stringify(actividad));\r\n    if (actividad.file) formData.append(\"imagen\", actividad.file, actividad.file.name);\r\n    return this.http.put<Actividad>(this.API_URL + actividad.id, formData);\r\n  }\r\n\r\n  eliminarActividad (id:number)\r\n  {\r\n    return this.http.delete(this.API_URL + id);\r\n  }\r\n\r\n  obtenerActividades (): Observable<Actividad[]>{\r\n     return this.http.get(this.API_URL).pipe(map(result=><Actividad[]>result));\r\n  }\r\n\r\n  getById (id: string): Observable<Actividad>{\r\n    return this.http.get(this.API_URL + id).pipe(map(result=><Actividad>result));\r\n  }\r\n\r\n   // Necesario para mostrar las actividades en la tabla de listado\r\n   find(tableState: ITableState): Observable<TableResponseModel<Actividad>> {\r\n    return this.http.get<Actividad[]>(this.API_URL + \"?portal=false\").pipe(\r\n      map((response: Actividad[]) => {\r\n        const filteredResult = baseFilter(response, tableState);\r\n        const result: TableResponseModel<Actividad> = {\r\n          items: filteredResult.items,\r\n          total: filteredResult.total\r\n        };\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sb => sb.unsubscribe());\r\n  }\r\n\r\n}","import { Inject, Injectable, OnDestroy } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Actividad } from '../models/Actividad';\r\nimport { Observable } from 'rxjs';\r\nimport { TableService } from '../_metronic_portal/shared/crud-table';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Convenio } from '../models/Convenio';\r\nimport { map } from 'rxjs/operators';\r\nimport { ITableState, TableResponseModel } from '../_metronic_gestion/shared/crud-table';\r\nimport { baseFilter } from '../_fake';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  \r\nexport class ConveniosService extends TableService<Convenio> implements OnDestroy{\r\n\r\n  API_URL = `${environment.apiUrl}` + 'api/Convenios/';\r\n\r\n  constructor(@Inject(HttpClient) http) {\r\n    super(http);\r\n  }\r\n\r\n  aniadirConvenio (convenio: Convenio): Observable<Convenio> \r\n  {\r\n    const formData = new FormData(); \r\n          \r\n    formData.append(\"convenio\", JSON.stringify(convenio));\r\n    formData.append(\"imagen\", convenio.file, convenio.file.name);\r\n    return this.http.post<Actividad>(this.API_URL, formData);\r\n  }\r\n\r\n  obtenerConvenios (): Observable<Convenio[]>{\r\n    return this.http.get(this.API_URL).pipe(map(result=><Convenio[]>result));\r\n  }\r\n\r\n  find(tableState: ITableState): Observable<TableResponseModel<Convenio>> {\r\n    return this.http.get<Convenio[]>(this.API_URL + \"?portal=false\").pipe(\r\n      map((response: Convenio[]) => {\r\n        const filteredResult = baseFilter(response, tableState);\r\n        const result: TableResponseModel<Convenio> = {\r\n          items: filteredResult.items,\r\n          total: filteredResult.total\r\n        };\r\n        return result;\r\n      })\r\n    );\r\n  } \r\n\r\n  getById (id: string): Observable<Convenio>{\r\n    return this.http.get(this.API_URL + id).pipe(map(result=><Convenio>result));\r\n  }\r\n\r\n   modificarConvenio (convenio: Convenio): Observable<Convenio> \r\n  {\r\n    const formData = new FormData(); \r\n    formData.append(\"convenio\", JSON.stringify(convenio));\r\n    if (convenio.file) formData.append(\"imagen\", convenio.file, convenio.file.name);\r\n    return this.http.put<Convenio>(this.API_URL + convenio.id, formData);\r\n  }\r\n\r\n  eliminarConvenio (id:number)\r\n  {\r\n    return this.http.delete(this.API_URL + id);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sb => sb.unsubscribe());\r\n  }\r\n\r\n}"]}